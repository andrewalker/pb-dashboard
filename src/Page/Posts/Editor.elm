module Page.Posts.Editor exposing (..)

import Html exposing (..)
import Html.Events exposing (..)
import Html.Attributes exposing (..)
import Data.Session exposing (Session)
import Data.Post exposing (Post, Slug)
import Json.Decode as Json
import Ports exposing (rmEditor, mkEditor)
import Feather
import Debug
import Json.Decode as Decode exposing (int, string, Decoder)
import Json.Decode.Pipeline exposing (decode, required)
import Page.Errored exposing (PageLoadError, pageLoadError)
import Task exposing (Task)
import Http
import Views.Page as Page


-- MODEL


type alias Model =
    Post


initNew : Model
initNew =
    { id = 0
    , title = ""
    , content = ""
    , slug = Data.Post.Slug ""
    , tags = []
    , description = ""
    , date = "just now"
    }


initEdit : Slug -> Task PageLoadError Model
initEdit slug =
    getPost slug
        |> Http.toTask
        |> Task.mapError (\_ -> pageLoadError Page.Other "Article is currently unavailable.")
        |> Task.map (\post -> post)


getPost : Slug -> Http.Request Post
getPost slug =
    Http.get "/single.json" (Decode.field "post" Data.Post.decoder)



-- UPDATE


type Msg
    = SetTitle String
    | SetContent String
    | SetDescription String
    | SetTags String


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        SetTitle t ->
            ( { model | title = t }, Cmd.none )

        SetContent c ->
            ( { model | content = c }, Cmd.none )

        SetDescription d ->
            ( { model | description = d }, Cmd.none )

        -- XXX: Make this robust:
        SetTags t ->
            ( { model | tags = (String.split "," t) }, Cmd.none )


tagsToString : List String -> String
tagsToString t =
    String.join "," t



-- VIEW


view : Session -> Model -> Html Msg
view session model =
    div [ class "col mt-5 px-2" ]
        [ div [ class "float-right mr-3" ]
            [ div [ class "btn-group dropdown" ]
                [ button [ class "btn-more", type_ "button", id "dropdownMenuButton", attribute "data-toggle" "dropdown" ]
                    [ Feather.moreHorizontal "#000000" 13 ]
                , div [ class "dropdown-menu dropdown-menu-right", attribute "aria-labelledby" "dropdownMenuButton", style [ ( "width", "40rem" ) ] ]
                    [ Html.form [ class "px-4 py-3" ]
                        [ div [ class "form-group" ]
                            [ label [] [ text "Add some tags, comma-separated:" ]
                            , input [ type_ "text", class "form-control", placeholder "perl, programming, free software", onInput SetTags, value (tagsToString model.tags) ] []
                            ]
                        , div [ class "form-group" ]
                            [ label [] [ text "You can provide a summary, or it will be autogenerated:" ]
                            , textarea [ class "form-control", placeholder "Short summary...", onInput SetDescription, value model.description ] []
                            ]
                        ]
                    ]
                ]
            ]
        , div [ class "mx-3" ]
            [ input [ class "h1 input-like-h1", onInput SetTitle, value model.title, placeholder "Title" ] []
            , br [] []
            , textarea [ id "mdEditor", class "form-control", onInput SetContent, value model.content ] []
            , button [ class "btn btn-primary", type_ "button" ]
                [ text "Publish" ]
            , br [] []
            , br [] []
            ]
        ]


targetTitleContent : Json.Decoder String
targetTitleContent =
    Json.at [ "target", "textContent" ] Json.string
